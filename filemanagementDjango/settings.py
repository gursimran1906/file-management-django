"""
Django settings for filemanagementDjango project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import socket
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3b1_t+z*dfo81p)$x=wa7uygt)x0%-6n+h3fhlkrg@xkuzq=7s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG','False'), 

ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = [
    'https://wip.anp.softwarised.com',
]

LOGIN_URL = '/login/'


SESSION_COOKIE_HTTPONLY = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 36000

DATA_UPLOAD_MAX_NUMBER_FIELDS = 2048

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'filemanagementDjango',
    'users',
    'frontend',
    'backend',
    'django_quill',
    'django_crontab',
    'django.contrib.humanize',
    'compressor'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'filemanagementDjango.urls'

AUTH_USER_MODEL = 'users.CustomUser'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
         
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



WSGI_APPLICATION = 'filemanagementDjango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


       

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'wip'),        
        'USER': os.getenv('DB_USER', 'gb'),    
        'PASSWORD': os.getenv('DB_USER_PASS', 'Mango@ANP290!'),    
        'HOST': os.getenv('DB_HOST', 'localhost'),    
        'PORT': os.getenv('DB_PORT','5432'),  
        'OPTIONS': {
            'sslmode': 'prefer',
        }
         
    }
}

# Check if PostgreSQL is available on the specified port
def is_postgresql_available(host, port):
    try:
        # Attempt to create a socket connection
        with socket.create_connection((host, port), timeout=1):
            return True
    except OSError:
        return False

# Check if PostgreSQL is available
if is_postgresql_available(DATABASES['default']['HOST'], DATABASES['default']['PORT']):
    try:
        import psycopg2
    except ImportError:
        # If PostgreSQL is not available, switch to SQLite
        DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'
        DATABASES['default']['NAME'] = os.path.join(BASE_DIR, 'db.sqlite3')
else:
    # If PostgreSQL is not available on the specified port, switch to SQLite
    DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'
    DATABASES['default']['NAME'] = os.path.join(BASE_DIR, 'db.sqlite3')


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/London'

USE_I18N = True

USE_TZ = True

DATE_INPUT_FORMATS = ('%d-%m-%Y','%Y-%m-%d')

DATE_FORMAT = '%d/%m/%Y'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
COMPRESS_ROOT = BASE_DIR / 'static'

COMPRESS_ENABLED = True

STATICFILES_FINDERS = ('compressor.finders.CompressorFinder',)

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static"
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



CRONJOBS = [
    ('*/15 * * * *', 'email_sorting.utils.get_emails_and_store','>>'+str(BASE_DIR)+'/email_sorting/email_job.log 2>&1'),
    ('* * 15 * *', 'email_sorting.utils.remove_log_file','>>'+str(BASE_DIR)+'/email_sorting/remove_log.log 2>&1')
]

QUILL_CONFIGS = {
    'default': {
        'theme': 'snow',
        'modules': {
            'syntax': True,
            'toolbar': [
                [
                    {'font': []},
                    {'header': []},
                    {'align': []},
                    'bold', 'italic', 'underline', 'strike', 'blockquote',
                    {'color': []},
                    {'background': []},
                ],
                
                [{'list': 'ordered'}, {'list': 'bullet'}],  
         
            ]
        }
    }
}
